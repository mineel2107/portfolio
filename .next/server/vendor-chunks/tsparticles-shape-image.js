"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tsparticles-shape-image";
exports.ids = ["vendor-chunks/tsparticles-shape-image"];
exports.modules = {

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js":
/*!*************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteStream: () => (/* binding */ ByteStream)\n/* harmony export */ });\nclass ByteStream {\n    constructor(bytes){\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr)=>acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        this.pos += 2;\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        do {\n            size = this.data[this.pos++];\n            for(let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])){}\n        }while (size !== 0);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = 0, len = 0;\n        for(let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1){\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        for(let i = 0; (size = this.data[this.pos++]) !== 0;){\n            for(let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]){}\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for(; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1){}\n        this.pos++;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0dpZlV0aWxzL0J5dGVTdHJlYW0uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BO0lBQ1RDLFlBQVlDLEtBQUssQ0FBRTtRQUNmLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBQ1gsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSUMsa0JBQWtCSDtJQUN0QztJQUNBSSxVQUFVQyxLQUFLLEVBQUU7UUFDYixNQUFNQyxRQUFRLElBQUksQ0FBQ0osSUFBSSxDQUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDTCxHQUFHLEVBQUUsSUFBSSxDQUFDQSxHQUFHLEdBQUdJO1FBQ25ELElBQUksQ0FBQ0osR0FBRyxJQUFJSyxNQUFNQyxNQUFNO1FBQ3hCLE9BQU9ELE1BQU1FLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQyxPQUFTRCxNQUFNRSxPQUFPQyxZQUFZLENBQUNGLE9BQU87SUFDeEU7SUFDQUcsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDRCxHQUFHLEdBQUc7SUFDaEM7SUFDQWEsZUFBZTtRQUNYLElBQUksQ0FBQ2IsR0FBRyxJQUFJO1FBQ1osT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNELEdBQUcsR0FBRyxFQUFFLEdBQUksS0FBSSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDRCxHQUFHLEdBQUcsRUFBRSxJQUFJO0lBQ2pFO0lBQ0FjLGdCQUFnQjtRQUNaLElBQUlDLGNBQWMsSUFBSUMsT0FBTztRQUM3QixHQUFHO1lBQ0NBLE9BQU8sSUFBSSxDQUFDZixJQUFJLENBQUMsSUFBSSxDQUFDRCxHQUFHLEdBQUc7WUFDNUIsSUFBSyxJQUFJSSxRQUFRWSxNQUFNLEVBQUVaLFNBQVMsR0FBR1csZUFBZUwsT0FBT0MsWUFBWSxDQUFDLElBQUksQ0FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQ0QsR0FBRyxHQUFHLEVBQUcsQ0FDaEc7UUFDSixRQUFTZ0IsU0FBUyxHQUFHO1FBQ3JCLE9BQU9EO0lBQ1g7SUFDQUUsbUJBQW1CO1FBQ2YsSUFBSUQsT0FBTyxHQUFHRSxNQUFNO1FBQ3BCLElBQUssSUFBSUMsU0FBUyxHQUFHLENBQUNILE9BQU8sSUFBSSxDQUFDZixJQUFJLENBQUMsSUFBSSxDQUFDRCxHQUFHLEdBQUdtQixPQUFPLE1BQU0sR0FBR0EsVUFBVUgsT0FBTyxFQUFHO1lBQ2xGRSxPQUFPRjtRQUNYO1FBQ0EsTUFBTUksWUFBWSxJQUFJQyxXQUFXSDtRQUNqQyxJQUFLLElBQUlJLElBQUksR0FBRyxDQUFDTixPQUFPLElBQUksQ0FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ0QsR0FBRyxHQUFHLE1BQU0sR0FBSTtZQUNuRCxJQUFLLElBQUlJLFFBQVFZLE1BQU0sRUFBRVosU0FBUyxHQUFHZ0IsU0FBUyxDQUFDRSxJQUFJLEdBQUcsSUFBSSxDQUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQ0QsR0FBRyxHQUFHLENBQUUsQ0FDN0U7UUFDSjtRQUNBLE9BQU9vQjtJQUNYO0lBQ0FHLGdCQUFnQjtRQUNaLE1BQU8sSUFBSSxDQUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQ0QsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUNBLEdBQUcsSUFBSSxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNELEdBQUcsQ0FBQyxHQUFHLEVBQUcsQ0FDdkU7UUFDQSxJQUFJLENBQUNBLEdBQUc7SUFDWjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2VzbS9HaWZVdGlscy9CeXRlU3RyZWFtLmpzPzQzNGMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEJ5dGVTdHJlYW0ge1xuICAgIGNvbnN0cnVjdG9yKGJ5dGVzKSB7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGJ5dGVzKTtcbiAgICB9XG4gICAgZ2V0U3RyaW5nKGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHNsaWNlID0gdGhpcy5kYXRhLnNsaWNlKHRoaXMucG9zLCB0aGlzLnBvcyArIGNvdW50KTtcbiAgICAgICAgdGhpcy5wb3MgKz0gc2xpY2UubGVuZ3RoO1xuICAgICAgICByZXR1cm4gc2xpY2UucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIFN0cmluZy5mcm9tQ2hhckNvZGUoY3VyciksIFwiXCIpO1xuICAgIH1cbiAgICBuZXh0Qnl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVt0aGlzLnBvcysrXTtcbiAgICB9XG4gICAgbmV4dFR3b0J5dGVzKCkge1xuICAgICAgICB0aGlzLnBvcyArPSAyO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zIC0gMl0gKyAodGhpcy5kYXRhW3RoaXMucG9zIC0gMV0gPDwgOCk7XG4gICAgfVxuICAgIHJlYWRTdWJCbG9ja3MoKSB7XG4gICAgICAgIGxldCBibG9ja1N0cmluZyA9IFwiXCIsIHNpemUgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBzaXplID0gdGhpcy5kYXRhW3RoaXMucG9zKytdO1xuICAgICAgICAgICAgZm9yIChsZXQgY291bnQgPSBzaXplOyAtLWNvdW50ID49IDA7IGJsb2NrU3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5kYXRhW3RoaXMucG9zKytdKSkge1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChzaXplICE9PSAwKTtcbiAgICAgICAgcmV0dXJuIGJsb2NrU3RyaW5nO1xuICAgIH1cbiAgICByZWFkU3ViQmxvY2tzQmluKCkge1xuICAgICAgICBsZXQgc2l6ZSA9IDAsIGxlbiA9IDA7XG4gICAgICAgIGZvciAobGV0IG9mZnNldCA9IDA7IChzaXplID0gdGhpcy5kYXRhW3RoaXMucG9zICsgb2Zmc2V0XSkgIT09IDA7IG9mZnNldCArPSBzaXplICsgMSkge1xuICAgICAgICAgICAgbGVuICs9IHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2tEYXRhID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IChzaXplID0gdGhpcy5kYXRhW3RoaXMucG9zKytdKSAhPT0gMDspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNvdW50ID0gc2l6ZTsgLS1jb3VudCA+PSAwOyBibG9ja0RhdGFbaSsrXSA9IHRoaXMuZGF0YVt0aGlzLnBvcysrXSkge1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBibG9ja0RhdGE7XG4gICAgfVxuICAgIHNraXBTdWJCbG9ja3MoKSB7XG4gICAgICAgIGZvciAoOyB0aGlzLmRhdGFbdGhpcy5wb3NdICE9PSAwOyB0aGlzLnBvcyArPSB0aGlzLmRhdGFbdGhpcy5wb3NdICsgMSkge1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zKys7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJ5dGVTdHJlYW0iLCJjb25zdHJ1Y3RvciIsImJ5dGVzIiwicG9zIiwiZGF0YSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiZ2V0U3RyaW5nIiwiY291bnQiLCJzbGljZSIsImxlbmd0aCIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJuZXh0Qnl0ZSIsIm5leHRUd29CeXRlcyIsInJlYWRTdWJCbG9ja3MiLCJibG9ja1N0cmluZyIsInNpemUiLCJyZWFkU3ViQmxvY2tzQmluIiwibGVuIiwib2Zmc2V0IiwiYmxvY2tEYXRhIiwiVWludDhBcnJheSIsImkiLCJza2lwU3ViQmxvY2tzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InterlaceOffsets: () => (/* binding */ InterlaceOffsets),\n/* harmony export */   InterlaceSteps: () => (/* binding */ InterlaceSteps)\n/* harmony export */ });\nconst InterlaceOffsets = [\n    0,\n    4,\n    2,\n    1\n];\nconst InterlaceSteps = [\n    8,\n    8,\n    4,\n    2\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0dpZlV0aWxzL0NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLG1CQUFtQjtJQUFDO0lBQUc7SUFBRztJQUFHO0NBQUUsQ0FBQztBQUN0QyxNQUFNQyxpQkFBaUI7SUFBQztJQUFHO0lBQUc7SUFBRztDQUFFLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0dpZlV0aWxzL0NvbnN0YW50cy5qcz9jNzFkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBJbnRlcmxhY2VPZmZzZXRzID0gWzAsIDQsIDIsIDFdO1xuZXhwb3J0IGNvbnN0IEludGVybGFjZVN0ZXBzID0gWzgsIDgsIDQsIDJdO1xuIl0sIm5hbWVzIjpbIkludGVybGFjZU9mZnNldHMiLCJJbnRlcmxhY2VTdGVwcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeGIF: () => (/* binding */ decodeGIF),\n/* harmony export */   getGIFLoopAmount: () => (/* binding */ getGIFLoopAmount)\n/* harmony export */ });\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js\");\n/* harmony import */ var _ByteStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ByteStream */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js\");\n\n\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for(let i = 0; i < count; i++){\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2]\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch(byteStream.nextByte()){\n        case 249:\n            {\n                const frame = gif.frames[getFrameIndex(false)];\n                byteStream.pos++;\n                const packedByte = byteStream.nextByte();\n                frame.GCreserved = (packedByte & 0xe0) >>> 5;\n                frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n                frame.userInputDelayFlag = (packedByte & 2) === 2;\n                const transparencyFlag = (packedByte & 1) === 1;\n                frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n                const transparencyIndex = byteStream.nextByte();\n                if (transparencyFlag) {\n                    getTransparencyIndex(transparencyIndex);\n                }\n                byteStream.pos++;\n                break;\n            }\n        case 255:\n            {\n                byteStream.pos++;\n                const applicationExtension = {\n                    identifier: byteStream.getString(8),\n                    authenticationCode: byteStream.getString(3),\n                    data: byteStream.readSubBlocksBin()\n                };\n                gif.applicationExtensions.push(applicationExtension);\n                break;\n            }\n        case 254:\n            {\n                gif.comments.push([\n                    getFrameIndex(false),\n                    byteStream.readSubBlocks()\n                ]);\n                break;\n            }\n        case 1:\n            {\n                if (gif.globalColorTable.length === 0) {\n                    throw new EvalError(\"plain text extension without global color table\");\n                }\n                byteStream.pos++;\n                gif.frames[getFrameIndex(false)].plainTextData = {\n                    left: byteStream.nextTwoBytes(),\n                    top: byteStream.nextTwoBytes(),\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                    charSize: {\n                        width: byteStream.nextTwoBytes(),\n                        height: byteStream.nextTwoBytes()\n                    },\n                    foregroundColor: byteStream.nextByte(),\n                    backgroundColor: byteStream.nextByte(),\n                    text: byteStream.readSubBlocks()\n                };\n                break;\n            }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << (packedByte & 7) + 1;\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index)=>{\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return {\n            r,\n            g,\n            b,\n            a: index === getTransparencyIndex(null) ? avgAlpha ? ~~((r + g + b) / 3) : 0 : 255\n        };\n    };\n    const image = (()=>{\n        try {\n            return new ImageData(frame.width, frame.height, {\n                colorSpace: \"srgb\"\n            });\n        } catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len)=>{\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16) & (1 << len) - 1 << bitPos) >>> bitPos;\n    };\n    if (interlacedFlag) {\n        for(let code = 0, size = minCodeSize + 1, pos = 0, dic = [\n            [\n                0\n            ]\n        ], pass = 0; pass < 4; pass++){\n            if (_Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] < frame.height) {\n                for(let pixelPos = 0, lineIndex = 0;;){\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for(let i = 0; i < dic.length; i++){\n                            dic[i] = i < clearCode ? [\n                                i\n                            ] : [];\n                        }\n                    } else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        } else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for(let i = 0; i < dic[code].length; i++){\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([\n                                r,\n                                g,\n                                b,\n                                a\n                            ], _Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] * frame.width + _Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex + pixelPos % (frame.width * 4));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (_Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] + _Constants__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, {\n                x: frame.left,\n                y: frame.top\n            }, {\n                width: gif.width,\n                height: gif.height\n            });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    } else {\n        for(let code = 0, size = minCodeSize + 1, pos = 0, dic = [\n            [\n                0\n            ]\n        ], pixelPos = -4;;){\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for(let i = 0; i < dic.length; i++){\n                    dic[i] = i < clearCode ? [\n                        i\n                    ] : [];\n                }\n            } else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                } else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for(let i = 0; i < dic[code].length; i++){\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([\n                        r,\n                        g,\n                        b,\n                        a\n                    ], pixelPos += 4);\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, {\n            x: frame.left,\n            y: frame.top\n        }, {\n            width: gif.width,\n            height: gif.height\n        });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch(byteStream.nextByte()){\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nfunction getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions){\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nasync function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha) avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, {\n            colorSpace: \"srgb\"\n        }),\n        comments: [],\n        applicationExtensions: []\n    }, byteStream = new _ByteStream__WEBPACK_IMPORTED_MODULE_1__.ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << (packedByte & 7) + 1, backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (()=>{\n        try {\n            return new ImageData(gif.width, gif.height, {\n                colorSpace: \"srgb\"\n            });\n        } catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [\n        r,\n        g,\n        b,\n        255\n    ] : [\n        0,\n        0,\n        0,\n        0\n    ]);\n    for(let i = 4; i < backgroundImage.data.length; i *= 2){\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment)=>{\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue)=>{\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, {\n                        colorSpace: \"srgb\"\n                    }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        }while (!await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback));\n        gif.frames.length--;\n        for (const frame of gif.frames){\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    } catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/ImageDrawer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageDrawer: () => (/* binding */ ImageDrawer)\n/* harmony export */ });\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Core/Utils/Constants.js\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js\");\n\n\nclass ImageDrawer {\n    constructor(engine){\n        this.loadImageShape = async (imageShape)=>{\n            if (!this._engine.loadImage) {\n                throw new Error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = {\n                x: -image.gifData.width * 0.5,\n                y: -image.gifData.height * 0.5\n            }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch(frame.disposalMethod){\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    } else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        } else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload){\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t)=>t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(()=>{\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t)=>t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(()=>{\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async ()=>{\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.replaceImageColor)(image, imageData, color, particle);\n            } else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js":
/*!********************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/ImagePreloader.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImagePreloaderPlugin: () => (/* binding */ ImagePreloaderPlugin)\n/* harmony export */ });\n/* harmony import */ var _Options_Classes_Preload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Options/Classes/Preload */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js\");\n\nclass ImagePreloaderPlugin {\n    constructor(engine){\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    getPlugin() {\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source || !source.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload){\n            const existing = preloadOptions.find((t)=>t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            } else {\n                const preload = new _Options_Classes_Preload__WEBPACK_IMPORTED_MODULE_0__.Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL0ltYWdlUHJlbG9hZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBQzdDLE1BQU1DO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixJQUFJLENBQUNDLEVBQUUsR0FBRztRQUNWLElBQUksQ0FBQ0MsT0FBTyxHQUFHRjtJQUNuQjtJQUNBRyxZQUFZO1FBQ1IsT0FBTyxDQUFDO0lBQ1o7SUFDQUMsWUFBWUMsT0FBTyxFQUFFQyxNQUFNLEVBQUU7UUFDekIsSUFBSSxDQUFDQSxVQUFVLENBQUNBLE9BQU9DLE9BQU8sRUFBRTtZQUM1QjtRQUNKO1FBQ0EsSUFBSSxDQUFDRixRQUFRRSxPQUFPLEVBQUU7WUFDbEJGLFFBQVFFLE9BQU8sR0FBRyxFQUFFO1FBQ3hCO1FBQ0EsTUFBTUMsaUJBQWlCSCxRQUFRRSxPQUFPO1FBQ3RDLEtBQUssTUFBTUUsUUFBUUgsT0FBT0MsT0FBTyxDQUFFO1lBQy9CLE1BQU1HLFdBQVdGLGVBQWVHLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxJQUFJLEtBQUtKLEtBQUtJLElBQUksSUFBSUQsRUFBRUUsR0FBRyxLQUFLTCxLQUFLSyxHQUFHO1lBQ3RGLElBQUlKLFVBQVU7Z0JBQ1ZBLFNBQVNLLElBQUksQ0FBQ047WUFDbEIsT0FDSztnQkFDRCxNQUFNRixVQUFVLElBQUlWLDZEQUFPQTtnQkFDM0JVLFFBQVFRLElBQUksQ0FBQ047Z0JBQ2JELGVBQWVRLElBQUksQ0FBQ1Q7WUFDeEI7UUFDSjtJQUNKO0lBQ0FVLGNBQWM7UUFDVixPQUFPO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy90c3BhcnRpY2xlcy1zaGFwZS1pbWFnZS9lc20vSW1hZ2VQcmVsb2FkZXIuanM/ZGE0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmVsb2FkIH0gZnJvbSBcIi4vT3B0aW9ucy9DbGFzc2VzL1ByZWxvYWRcIjtcbmV4cG9ydCBjbGFzcyBJbWFnZVByZWxvYWRlclBsdWdpbiB7XG4gICAgY29uc3RydWN0b3IoZW5naW5lKSB7XG4gICAgICAgIHRoaXMuaWQgPSBcImltYWdlUHJlbG9hZGVyXCI7XG4gICAgICAgIHRoaXMuX2VuZ2luZSA9IGVuZ2luZTtcbiAgICB9XG4gICAgZ2V0UGx1Z2luKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGxvYWRPcHRpb25zKG9wdGlvbnMsIHNvdXJjZSkge1xuICAgICAgICBpZiAoIXNvdXJjZSB8fCAhc291cmNlLnByZWxvYWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMucHJlbG9hZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5wcmVsb2FkID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlbG9hZE9wdGlvbnMgPSBvcHRpb25zLnByZWxvYWQ7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBzb3VyY2UucHJlbG9hZCkge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBwcmVsb2FkT3B0aW9ucy5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGl0ZW0ubmFtZSB8fCB0LnNyYyA9PT0gaXRlbS5zcmMpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmcubG9hZChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZWxvYWQgPSBuZXcgUHJlbG9hZCgpO1xuICAgICAgICAgICAgICAgIHByZWxvYWQubG9hZChpdGVtKTtcbiAgICAgICAgICAgICAgICBwcmVsb2FkT3B0aW9ucy5wdXNoKHByZWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG5lZWRzUGx1Z2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUHJlbG9hZCIsIkltYWdlUHJlbG9hZGVyUGx1Z2luIiwiY29uc3RydWN0b3IiLCJlbmdpbmUiLCJpZCIsIl9lbmdpbmUiLCJnZXRQbHVnaW4iLCJsb2FkT3B0aW9ucyIsIm9wdGlvbnMiLCJzb3VyY2UiLCJwcmVsb2FkIiwicHJlbG9hZE9wdGlvbnMiLCJpdGVtIiwiZXhpc3RpbmciLCJmaW5kIiwidCIsIm5hbWUiLCJzcmMiLCJsb2FkIiwicHVzaCIsIm5lZWRzUGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Preload: () => (/* binding */ Preload)\n/* harmony export */ });\nclass Preload {\n    constructor(){\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL09wdGlvbnMvQ2xhc3Nlcy9QcmVsb2FkLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQTtJQUNUQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxHQUFHLEdBQUc7UUFDWCxJQUFJLENBQUNDLEdBQUcsR0FBRztJQUNmO0lBQ0FDLEtBQUtDLElBQUksRUFBRTtRQUNQLElBQUksQ0FBQ0EsTUFBTTtZQUNQO1FBQ0o7UUFDQSxJQUFJQSxLQUFLRixHQUFHLEtBQUtHLFdBQVc7WUFDeEIsSUFBSSxDQUFDSCxHQUFHLEdBQUdFLEtBQUtGLEdBQUc7UUFDdkI7UUFDQSxJQUFJRSxLQUFLRSxNQUFNLEtBQUtELFdBQVc7WUFDM0IsSUFBSSxDQUFDQyxNQUFNLEdBQUdGLEtBQUtFLE1BQU07UUFDN0I7UUFDQSxJQUFJRixLQUFLRyxJQUFJLEtBQUtGLFdBQVc7WUFDekIsSUFBSSxDQUFDRSxJQUFJLEdBQUdILEtBQUtHLElBQUk7UUFDekI7UUFDQSxJQUFJSCxLQUFLSSxZQUFZLEtBQUtILFdBQVc7WUFDakMsSUFBSSxDQUFDRyxZQUFZLEdBQUdKLEtBQUtJLFlBQVk7UUFDekM7UUFDQSxJQUFJSixLQUFLSCxHQUFHLEtBQUtJLFdBQVc7WUFDeEIsSUFBSSxDQUFDSixHQUFHLEdBQUdHLEtBQUtILEdBQUc7UUFDdkI7UUFDQSxJQUFJRyxLQUFLSyxLQUFLLEtBQUtKLFdBQVc7WUFDMUIsSUFBSSxDQUFDSSxLQUFLLEdBQUdMLEtBQUtLLEtBQUs7UUFDM0I7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2VzbS9PcHRpb25zL0NsYXNzZXMvUHJlbG9hZC5qcz9jZjFlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBQcmVsb2FkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zcmMgPSBcIlwiO1xuICAgICAgICB0aGlzLmdpZiA9IGZhbHNlO1xuICAgIH1cbiAgICBsb2FkKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZ2lmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2lmID0gZGF0YS5naWY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuaGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gZGF0YS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEucmVwbGFjZUNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZUNvbG9yID0gZGF0YS5yZXBsYWNlQ29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuc3JjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3JjID0gZGF0YS5zcmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEud2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGRhdGEud2lkdGg7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUHJlbG9hZCIsImNvbnN0cnVjdG9yIiwic3JjIiwiZ2lmIiwibG9hZCIsImRhdGEiLCJ1bmRlZmluZWQiLCJoZWlnaHQiLCJuYW1lIiwicmVwbGFjZUNvbG9yIiwid2lkdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/Utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadSvgImage: () => (/* binding */ downloadSvgImage),\n/* harmony export */   loadGifImage: () => (/* binding */ loadGifImage),\n/* harmony export */   loadImage: () => (/* binding */ loadImage),\n/* harmony export */   replaceImageColor: () => (/* binding */ replaceImageColor)\n/* harmony export */ });\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Utils/ColorUtils.js\");\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Utils/Utils.js\");\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Core/Utils/Constants.js\");\n/* harmony import */ var _GifUtils_Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GifUtils/Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js\");\n\n\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = (0,tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getStyleFromHsl)(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, ()=>colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nasync function loadImage(image) {\n    return new Promise((resolve)=>{\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", ()=>{\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", ()=>{\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            (0,tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__.getLogger)().error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_2__.errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nasync function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await (0,_GifUtils_Utils__WEBPACK_IMPORTED_MODULE_3__.decodeGIF)(image.source);\n        image.gifLoopCount = (0,_GifUtils_Utils__WEBPACK_IMPORTED_MODULE_3__.getGIFLoopAmount)(image.gifData) ?? 0;\n        if (image.gifLoopCount === 0) {\n            image.gifLoopCount = Infinity;\n        }\n    } catch  {\n        image.error = true;\n    }\n    image.loading = false;\n}\nasync function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        (0,tsparticles_engine__WEBPACK_IMPORTED_MODULE_1__.getLogger)().error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_2__.errorPrefix} Image not found`);\n        image.error = true;\n    } else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nfunction replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src\n    };\n    return new Promise((resolve)=>{\n        const svg = new Blob([\n            svgColoredData\n        ], {\n            type: \"image/svg+xml\"\n        }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", ()=>{\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async ()=>{\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL1V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTZFO0FBQ2Q7QUFDL0QsTUFBTUssb0JBQW9CO0FBQzFCLFNBQVNDLGdCQUFnQkMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDL0MsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0g7SUFDcEIsSUFBSSxDQUFDRyxTQUFTO1FBQ1YsT0FBTztJQUNYO0lBQ0EsTUFBTUMsYUFBYVQsbUVBQWVBLENBQUNNLE9BQU9DO0lBQzFDLElBQUlDLFFBQVFFLFFBQVEsQ0FBQyxTQUFTO1FBQzFCLE9BQU9GLFFBQVFHLE9BQU8sQ0FBQ1IsbUJBQW1CLElBQU1NO0lBQ3BEO0lBQ0EsTUFBTUcsZUFBZUosUUFBUUssT0FBTyxDQUFDO0lBQ3JDLE9BQU8sQ0FBQyxFQUFFTCxRQUFRTSxTQUFTLENBQUMsR0FBR0YsY0FBYyxPQUFPLEVBQUVILFdBQVcsQ0FBQyxFQUFFRCxRQUFRTSxTQUFTLENBQUNGLGNBQWMsQ0FBQztBQUN6RztBQUNPLGVBQWVHLFVBQVVDLEtBQUs7SUFDakMsT0FBTyxJQUFJQyxRQUFRLENBQUNDO1FBQ2hCRixNQUFNRyxPQUFPLEdBQUc7UUFDaEIsTUFBTUMsTUFBTSxJQUFJQztRQUNoQkwsTUFBTU0sT0FBTyxHQUFHRjtRQUNoQkEsSUFBSUcsZ0JBQWdCLENBQUMsUUFBUTtZQUN6QlAsTUFBTUcsT0FBTyxHQUFHO1lBQ2hCRDtRQUNKO1FBQ0FFLElBQUlHLGdCQUFnQixDQUFDLFNBQVM7WUFDMUJQLE1BQU1NLE9BQU8sR0FBR0U7WUFDaEJSLE1BQU1TLEtBQUssR0FBRztZQUNkVCxNQUFNRyxPQUFPLEdBQUc7WUFDaEJwQiw2REFBU0EsR0FBRzBCLEtBQUssQ0FBQyxDQUFDLEVBQUUzQiwyREFBV0EsQ0FBQyxnQkFBZ0IsRUFBRWtCLE1BQU1VLE1BQU0sQ0FBQyxDQUFDO1lBQ2pFUjtRQUNKO1FBQ0FFLElBQUlPLEdBQUcsR0FBR1gsTUFBTVUsTUFBTTtJQUMxQjtBQUNKO0FBQ08sZUFBZUUsYUFBYVosS0FBSztJQUNwQyxJQUFJQSxNQUFNYSxJQUFJLEtBQUssT0FBTztRQUN0QixNQUFNZCxVQUFVQztRQUNoQjtJQUNKO0lBQ0FBLE1BQU1HLE9BQU8sR0FBRztJQUNoQixJQUFJO1FBQ0FILE1BQU1jLE9BQU8sR0FBRyxNQUFNN0IsMERBQVNBLENBQUNlLE1BQU1VLE1BQU07UUFDNUNWLE1BQU1lLFlBQVksR0FBRzdCLGlFQUFnQkEsQ0FBQ2MsTUFBTWMsT0FBTyxLQUFLO1FBQ3hELElBQUlkLE1BQU1lLFlBQVksS0FBSyxHQUFHO1lBQzFCZixNQUFNZSxZQUFZLEdBQUdDO1FBQ3pCO0lBQ0osRUFDQSxPQUFNO1FBQ0ZoQixNQUFNUyxLQUFLLEdBQUc7SUFDbEI7SUFDQVQsTUFBTUcsT0FBTyxHQUFHO0FBQ3BCO0FBQ08sZUFBZWMsaUJBQWlCakIsS0FBSztJQUN4QyxJQUFJQSxNQUFNYSxJQUFJLEtBQUssT0FBTztRQUN0QixNQUFNZCxVQUFVQztRQUNoQjtJQUNKO0lBQ0FBLE1BQU1HLE9BQU8sR0FBRztJQUNoQixNQUFNZSxXQUFXLE1BQU1DLE1BQU1uQixNQUFNVSxNQUFNO0lBQ3pDLElBQUksQ0FBQ1EsU0FBU0UsRUFBRSxFQUFFO1FBQ2RyQyw2REFBU0EsR0FBRzBCLEtBQUssQ0FBQyxDQUFDLEVBQUUzQiwyREFBV0EsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNsRGtCLE1BQU1TLEtBQUssR0FBRztJQUNsQixPQUNLO1FBQ0RULE1BQU1SLE9BQU8sR0FBRyxNQUFNMEIsU0FBU0csSUFBSTtJQUN2QztJQUNBckIsTUFBTUcsT0FBTyxHQUFHO0FBQ3BCO0FBQ08sU0FBU21CLGtCQUFrQnRCLEtBQUssRUFBRXVCLFNBQVMsRUFBRWpDLEtBQUssRUFBRWtDLFFBQVE7SUFDL0QsTUFBTUMsaUJBQWlCckMsZ0JBQWdCWSxPQUFPVixPQUFPa0MsU0FBU2pDLE9BQU8sRUFBRW1DLFNBQVMsSUFBSUMsV0FBVztRQUMzRnJDO1FBQ0FzQyxLQUFLTCxVQUFVSyxHQUFHO1FBQ2xCQyxNQUFNO1lBQ0YsR0FBRzdCLEtBQUs7WUFDUlIsU0FBU2lDO1FBQ2I7UUFDQUssUUFBUTtRQUNSQyxPQUFPUixVQUFVUyxLQUFLLEdBQUdULFVBQVVVLE1BQU07UUFDekNDLGNBQWNYLFVBQVVXLFlBQVksSUFBSVgsVUFBVVksYUFBYTtRQUMvRHpCLFFBQVFhLFVBQVVaLEdBQUc7SUFDekI7SUFDQSxPQUFPLElBQUlWLFFBQVEsQ0FBQ0M7UUFDaEIsTUFBTWtDLE1BQU0sSUFBSUMsS0FBSztZQUFDWjtTQUFlLEVBQUU7WUFBRVosTUFBTTtRQUFnQixJQUFJeUIsU0FBU0MsT0FBT0MsT0FBT0QsR0FBRyxJQUFJQyxPQUFPQyxTQUFTLElBQUlELFFBQVFFLE1BQU1KLE9BQU9LLGVBQWUsQ0FBQ1AsTUFBTWhDLE1BQU0sSUFBSUM7UUFDMUtELElBQUlHLGdCQUFnQixDQUFDLFFBQVE7WUFDekJvQixTQUFTRyxNQUFNLEdBQUc7WUFDbEJILFNBQVNyQixPQUFPLEdBQUdGO1lBQ25CRixRQUFReUI7WUFDUlcsT0FBT00sZUFBZSxDQUFDRjtRQUMzQjtRQUNBdEMsSUFBSUcsZ0JBQWdCLENBQUMsU0FBUztZQUMxQitCLE9BQU9NLGVBQWUsQ0FBQ0Y7WUFDdkIsTUFBTUcsT0FBTztnQkFDVCxHQUFHN0MsS0FBSztnQkFDUlMsT0FBTztnQkFDUE4sU0FBUztZQUNiO1lBQ0EsTUFBTUosVUFBVThDO1lBQ2hCbEIsU0FBU0csTUFBTSxHQUFHO1lBQ2xCSCxTQUFTckIsT0FBTyxHQUFHdUMsS0FBS3ZDLE9BQU87WUFDL0JKLFFBQVF5QjtRQUNaO1FBQ0F2QixJQUFJTyxHQUFHLEdBQUcrQjtJQUNkO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL1V0aWxzLmpzP2JiZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JQcmVmaXgsIGdldExvZ2dlciwgZ2V0U3R5bGVGcm9tSHNsIH0gZnJvbSBcInRzcGFydGljbGVzLWVuZ2luZVwiO1xuaW1wb3J0IHsgZGVjb2RlR0lGLCBnZXRHSUZMb29wQW1vdW50IH0gZnJvbSBcIi4vR2lmVXRpbHMvVXRpbHNcIjtcbmNvbnN0IGN1cnJlbnRDb2xvclJlZ2V4ID0gLygjKD86WzAtOWEtZl17Mn0pezIsNH18KCNbMC05YS1mXXszfSl8KHJnYnxoc2wpYT9cXCgoLT9cXGQrJT9bLFxcc10rKXsyLDN9XFxzKltcXGQuXSslP1xcKSl8Y3VycmVudGNvbG9yL2dpO1xuZnVuY3Rpb24gcmVwbGFjZUNvbG9yU3ZnKGltYWdlU2hhcGUsIGNvbG9yLCBvcGFjaXR5KSB7XG4gICAgY29uc3QgeyBzdmdEYXRhIH0gPSBpbWFnZVNoYXBlO1xuICAgIGlmICghc3ZnRGF0YSkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgY29uc3QgY29sb3JTdHlsZSA9IGdldFN0eWxlRnJvbUhzbChjb2xvciwgb3BhY2l0eSk7XG4gICAgaWYgKHN2Z0RhdGEuaW5jbHVkZXMoXCJmaWxsXCIpKSB7XG4gICAgICAgIHJldHVybiBzdmdEYXRhLnJlcGxhY2UoY3VycmVudENvbG9yUmVnZXgsICgpID0+IGNvbG9yU3R5bGUpO1xuICAgIH1cbiAgICBjb25zdCBwcmVGaWxsSW5kZXggPSBzdmdEYXRhLmluZGV4T2YoXCI+XCIpO1xuICAgIHJldHVybiBgJHtzdmdEYXRhLnN1YnN0cmluZygwLCBwcmVGaWxsSW5kZXgpfSBmaWxsPVwiJHtjb2xvclN0eWxlfVwiJHtzdmdEYXRhLnN1YnN0cmluZyhwcmVGaWxsSW5kZXgpfWA7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEltYWdlKGltYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGltYWdlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1hZ2UuZWxlbWVudCA9IGltZztcbiAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgICAgICAgIGltYWdlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaW1hZ2UuZWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGltYWdlLmVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIGltYWdlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGdldExvZ2dlcigpLmVycm9yKGAke2Vycm9yUHJlZml4fSBsb2FkaW5nIGltYWdlOiAke2ltYWdlLnNvdXJjZX1gKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltZy5zcmMgPSBpbWFnZS5zb3VyY2U7XG4gICAgfSk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZEdpZkltYWdlKGltYWdlKSB7XG4gICAgaWYgKGltYWdlLnR5cGUgIT09IFwiZ2lmXCIpIHtcbiAgICAgICAgYXdhaXQgbG9hZEltYWdlKGltYWdlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbWFnZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgICBpbWFnZS5naWZEYXRhID0gYXdhaXQgZGVjb2RlR0lGKGltYWdlLnNvdXJjZSk7XG4gICAgICAgIGltYWdlLmdpZkxvb3BDb3VudCA9IGdldEdJRkxvb3BBbW91bnQoaW1hZ2UuZ2lmRGF0YSkgPz8gMDtcbiAgICAgICAgaWYgKGltYWdlLmdpZkxvb3BDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgaW1hZ2UuZ2lmTG9vcENvdW50ID0gSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICBpbWFnZS5lcnJvciA9IHRydWU7XG4gICAgfVxuICAgIGltYWdlLmxvYWRpbmcgPSBmYWxzZTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkb3dubG9hZFN2Z0ltYWdlKGltYWdlKSB7XG4gICAgaWYgKGltYWdlLnR5cGUgIT09IFwic3ZnXCIpIHtcbiAgICAgICAgYXdhaXQgbG9hZEltYWdlKGltYWdlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbWFnZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGltYWdlLnNvdXJjZSk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBnZXRMb2dnZXIoKS5lcnJvcihgJHtlcnJvclByZWZpeH0gSW1hZ2Ugbm90IGZvdW5kYCk7XG4gICAgICAgIGltYWdlLmVycm9yID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGltYWdlLnN2Z0RhdGEgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgfVxuICAgIGltYWdlLmxvYWRpbmcgPSBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlSW1hZ2VDb2xvcihpbWFnZSwgaW1hZ2VEYXRhLCBjb2xvciwgcGFydGljbGUpIHtcbiAgICBjb25zdCBzdmdDb2xvcmVkRGF0YSA9IHJlcGxhY2VDb2xvclN2ZyhpbWFnZSwgY29sb3IsIHBhcnRpY2xlLm9wYWNpdHk/LnZhbHVlID8/IDEpLCBpbWFnZVJlcyA9IHtcbiAgICAgICAgY29sb3IsXG4gICAgICAgIGdpZjogaW1hZ2VEYXRhLmdpZixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgLi4uaW1hZ2UsXG4gICAgICAgICAgICBzdmdEYXRhOiBzdmdDb2xvcmVkRGF0YSxcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZGVkOiBmYWxzZSxcbiAgICAgICAgcmF0aW86IGltYWdlRGF0YS53aWR0aCAvIGltYWdlRGF0YS5oZWlnaHQsXG4gICAgICAgIHJlcGxhY2VDb2xvcjogaW1hZ2VEYXRhLnJlcGxhY2VDb2xvciA/PyBpbWFnZURhdGEucmVwbGFjZV9jb2xvcixcbiAgICAgICAgc291cmNlOiBpbWFnZURhdGEuc3JjLFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNvbnN0IHN2ZyA9IG5ldyBCbG9iKFtzdmdDb2xvcmVkRGF0YV0sIHsgdHlwZTogXCJpbWFnZS9zdmcreG1sXCIgfSksIGRvbVVybCA9IFVSTCB8fCB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkwgfHwgd2luZG93LCB1cmwgPSBkb21VcmwuY3JlYXRlT2JqZWN0VVJMKHN2ZyksIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaW1hZ2VSZXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGltYWdlUmVzLmVsZW1lbnQgPSBpbWc7XG4gICAgICAgICAgICByZXNvbHZlKGltYWdlUmVzKTtcbiAgICAgICAgICAgIGRvbVVybC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgZG9tVXJsLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgICAgICAgY29uc3QgaW1nMiA9IHtcbiAgICAgICAgICAgICAgICAuLi5pbWFnZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhd2FpdCBsb2FkSW1hZ2UoaW1nMik7XG4gICAgICAgICAgICBpbWFnZVJlcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgaW1hZ2VSZXMuZWxlbWVudCA9IGltZzIuZWxlbWVudDtcbiAgICAgICAgICAgIHJlc29sdmUoaW1hZ2VSZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJlcnJvclByZWZpeCIsImdldExvZ2dlciIsImdldFN0eWxlRnJvbUhzbCIsImRlY29kZUdJRiIsImdldEdJRkxvb3BBbW91bnQiLCJjdXJyZW50Q29sb3JSZWdleCIsInJlcGxhY2VDb2xvclN2ZyIsImltYWdlU2hhcGUiLCJjb2xvciIsIm9wYWNpdHkiLCJzdmdEYXRhIiwiY29sb3JTdHlsZSIsImluY2x1ZGVzIiwicmVwbGFjZSIsInByZUZpbGxJbmRleCIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJsb2FkSW1hZ2UiLCJpbWFnZSIsIlByb21pc2UiLCJyZXNvbHZlIiwibG9hZGluZyIsImltZyIsIkltYWdlIiwiZWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ1bmRlZmluZWQiLCJlcnJvciIsInNvdXJjZSIsInNyYyIsImxvYWRHaWZJbWFnZSIsInR5cGUiLCJnaWZEYXRhIiwiZ2lmTG9vcENvdW50IiwiSW5maW5pdHkiLCJkb3dubG9hZFN2Z0ltYWdlIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwidGV4dCIsInJlcGxhY2VJbWFnZUNvbG9yIiwiaW1hZ2VEYXRhIiwicGFydGljbGUiLCJzdmdDb2xvcmVkRGF0YSIsInZhbHVlIiwiaW1hZ2VSZXMiLCJnaWYiLCJkYXRhIiwibG9hZGVkIiwicmF0aW8iLCJ3aWR0aCIsImhlaWdodCIsInJlcGxhY2VDb2xvciIsInJlcGxhY2VfY29sb3IiLCJzdmciLCJCbG9iIiwiZG9tVXJsIiwiVVJMIiwid2luZG93Iiwid2Via2l0VVJMIiwidXJsIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiaW1nMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/esm/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadImageShape: () => (/* binding */ loadImageShape)\n/* harmony export */ });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/Utils.js\");\n/* harmony import */ var _ImageDrawer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ImageDrawer */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js\");\n/* harmony import */ var _ImagePreloader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ImagePreloader */ \"(ssr)/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js\");\n/* harmony import */ var tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/esm/Core/Utils/Constants.js\");\n\n\n\n\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data)=>{\n        if (!data.name && !data.src) {\n            throw new Error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t)=>t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - 3),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined\n            };\n            engine.images.push(image);\n            const imageFunc = data.gif ? _Utils__WEBPACK_IMPORTED_MODULE_1__.loadGifImage : data.replaceColor ? _Utils__WEBPACK_IMPORTED_MODULE_1__.downloadSvgImage : _Utils__WEBPACK_IMPORTED_MODULE_1__.loadImage;\n            await imageFunc(image);\n        } catch  {\n            throw new Error(`${tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nasync function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new _ImagePreloader__WEBPACK_IMPORTED_MODULE_2__.ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\n        \"image\",\n        \"images\"\n    ], new _ImageDrawer__WEBPACK_IMPORTED_MODULE_3__.ImageDrawer(engine), refresh);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9FO0FBQ3hCO0FBQ1k7QUFDUDtBQUNqRCxTQUFTTSxxQkFBcUJDLE1BQU07SUFDaEMsSUFBSUEsT0FBT0wsU0FBUyxFQUFFO1FBQ2xCO0lBQ0o7SUFDQUssT0FBT0wsU0FBUyxHQUFHLE9BQU9NO1FBQ3RCLElBQUksQ0FBQ0EsS0FBS0MsSUFBSSxJQUFJLENBQUNELEtBQUtFLEdBQUcsRUFBRTtZQUN6QixNQUFNLElBQUlDLE1BQU0sQ0FBQyxFQUFFTiwyREFBV0EsQ0FBQyx5QkFBeUIsQ0FBQztRQUM3RDtRQUNBLElBQUksQ0FBQ0UsT0FBT0ssTUFBTSxFQUFFO1lBQ2hCTCxPQUFPSyxNQUFNLEdBQUcsRUFBRTtRQUN0QjtRQUNBLElBQUlMLE9BQU9LLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVMLElBQUksS0FBS0QsS0FBS0MsSUFBSSxJQUFJSyxFQUFFQyxNQUFNLEtBQUtQLEtBQUtFLEdBQUcsR0FBRztZQUMxRTtRQUNKO1FBQ0EsSUFBSTtZQUNBLE1BQU1NLFFBQVE7Z0JBQ1ZDLEtBQUtULEtBQUtTLEdBQUcsSUFBSTtnQkFDakJSLE1BQU1ELEtBQUtDLElBQUksSUFBSUQsS0FBS0UsR0FBRztnQkFDM0JLLFFBQVFQLEtBQUtFLEdBQUc7Z0JBQ2hCUSxNQUFNVixLQUFLRSxHQUFHLENBQUNTLFNBQVMsQ0FBQ1gsS0FBS0UsR0FBRyxDQUFDVSxNQUFNLEdBQUc7Z0JBQzNDQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxjQUFjZixLQUFLZSxZQUFZO2dCQUMvQkMsT0FBT2hCLEtBQUtpQixLQUFLLElBQUlqQixLQUFLa0IsTUFBTSxHQUFHbEIsS0FBS2lCLEtBQUssR0FBR2pCLEtBQUtrQixNQUFNLEdBQUdDO1lBQ2xFO1lBQ0FwQixPQUFPSyxNQUFNLENBQUNnQixJQUFJLENBQUNaO1lBQ25CLE1BQU1hLFlBQVlyQixLQUFLUyxHQUFHLEdBQUdoQixnREFBWUEsR0FBR08sS0FBS2UsWUFBWSxHQUFHdkIsb0RBQWdCQSxHQUFHRSw2Q0FBU0E7WUFDNUYsTUFBTTJCLFVBQVViO1FBQ3BCLEVBQ0EsT0FBTTtZQUNGLE1BQU0sSUFBSUwsTUFBTSxDQUFDLEVBQUVOLDJEQUFXQSxDQUFDLENBQUMsRUFBRUcsS0FBS0MsSUFBSSxJQUFJRCxLQUFLRSxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ3ZFO0lBQ0o7QUFDSjtBQUNPLGVBQWVvQixlQUFldkIsTUFBTSxFQUFFd0IsVUFBVSxJQUFJO0lBQ3ZEekIscUJBQXFCQztJQUNyQixNQUFNeUIsWUFBWSxJQUFJNUIsaUVBQW9CQSxDQUFDRztJQUMzQyxNQUFNQSxPQUFPMEIsU0FBUyxDQUFDRCxXQUFXRDtJQUNsQyxNQUFNeEIsT0FBTzJCLFFBQVEsQ0FBQztRQUFDO1FBQVM7S0FBUyxFQUFFLElBQUkvQixxREFBV0EsQ0FBQ0ksU0FBU3dCO0FBQ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2VzbS9pbmRleC5qcz9lNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRvd25sb2FkU3ZnSW1hZ2UsIGxvYWRHaWZJbWFnZSwgbG9hZEltYWdlIH0gZnJvbSBcIi4vVXRpbHNcIjtcbmltcG9ydCB7IEltYWdlRHJhd2VyIH0gZnJvbSBcIi4vSW1hZ2VEcmF3ZXJcIjtcbmltcG9ydCB7IEltYWdlUHJlbG9hZGVyUGx1Z2luIH0gZnJvbSBcIi4vSW1hZ2VQcmVsb2FkZXJcIjtcbmltcG9ydCB7IGVycm9yUHJlZml4IH0gZnJvbSBcInRzcGFydGljbGVzLWVuZ2luZVwiO1xuZnVuY3Rpb24gYWRkTG9hZEltYWdlVG9FbmdpbmUoZW5naW5lKSB7XG4gICAgaWYgKGVuZ2luZS5sb2FkSW1hZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbmdpbmUubG9hZEltYWdlID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKCFkYXRhLm5hbWUgJiYgIWRhdGEuc3JjKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZXJyb3JQcmVmaXh9IG5vIGltYWdlIHNvdXJjZSBwcm92aWRlZGApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZW5naW5lLmltYWdlcykge1xuICAgICAgICAgICAgZW5naW5lLmltYWdlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmdpbmUuaW1hZ2VzLmZpbmQoKHQpID0+IHQubmFtZSA9PT0gZGF0YS5uYW1lIHx8IHQuc291cmNlID09PSBkYXRhLnNyYykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSB7XG4gICAgICAgICAgICAgICAgZ2lmOiBkYXRhLmdpZiA/PyBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLm5hbWUgPz8gZGF0YS5zcmMsXG4gICAgICAgICAgICAgICAgc291cmNlOiBkYXRhLnNyYyxcbiAgICAgICAgICAgICAgICB0eXBlOiBkYXRhLnNyYy5zdWJzdHJpbmcoZGF0YS5zcmMubGVuZ3RoIC0gMyksXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVwbGFjZUNvbG9yOiBkYXRhLnJlcGxhY2VDb2xvcixcbiAgICAgICAgICAgICAgICByYXRpbzogZGF0YS53aWR0aCAmJiBkYXRhLmhlaWdodCA/IGRhdGEud2lkdGggLyBkYXRhLmhlaWdodCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlbmdpbmUuaW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VGdW5jID0gZGF0YS5naWYgPyBsb2FkR2lmSW1hZ2UgOiBkYXRhLnJlcGxhY2VDb2xvciA/IGRvd25sb2FkU3ZnSW1hZ2UgOiBsb2FkSW1hZ2U7XG4gICAgICAgICAgICBhd2FpdCBpbWFnZUZ1bmMoaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtlcnJvclByZWZpeH0gJHtkYXRhLm5hbWUgPz8gZGF0YS5zcmN9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkSW1hZ2VTaGFwZShlbmdpbmUsIHJlZnJlc2ggPSB0cnVlKSB7XG4gICAgYWRkTG9hZEltYWdlVG9FbmdpbmUoZW5naW5lKTtcbiAgICBjb25zdCBwcmVsb2FkZXIgPSBuZXcgSW1hZ2VQcmVsb2FkZXJQbHVnaW4oZW5naW5lKTtcbiAgICBhd2FpdCBlbmdpbmUuYWRkUGx1Z2luKHByZWxvYWRlciwgcmVmcmVzaCk7XG4gICAgYXdhaXQgZW5naW5lLmFkZFNoYXBlKFtcImltYWdlXCIsIFwiaW1hZ2VzXCJdLCBuZXcgSW1hZ2VEcmF3ZXIoZW5naW5lKSwgcmVmcmVzaCk7XG59XG4iXSwibmFtZXMiOlsiZG93bmxvYWRTdmdJbWFnZSIsImxvYWRHaWZJbWFnZSIsImxvYWRJbWFnZSIsIkltYWdlRHJhd2VyIiwiSW1hZ2VQcmVsb2FkZXJQbHVnaW4iLCJlcnJvclByZWZpeCIsImFkZExvYWRJbWFnZVRvRW5naW5lIiwiZW5naW5lIiwiZGF0YSIsIm5hbWUiLCJzcmMiLCJFcnJvciIsImltYWdlcyIsImZpbmQiLCJ0Iiwic291cmNlIiwiaW1hZ2UiLCJnaWYiLCJ0eXBlIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwiZXJyb3IiLCJsb2FkaW5nIiwicmVwbGFjZUNvbG9yIiwicmF0aW8iLCJ3aWR0aCIsImhlaWdodCIsInVuZGVmaW5lZCIsInB1c2giLCJpbWFnZUZ1bmMiLCJsb2FkSW1hZ2VTaGFwZSIsInJlZnJlc2giLCJwcmVsb2FkZXIiLCJhZGRQbHVnaW4iLCJhZGRTaGFwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/esm/index.js\n");

/***/ })

};
;